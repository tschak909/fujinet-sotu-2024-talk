#+title: FujiNet State of the Union (SOTU) 2024
#+author: Thomas Cherryhomes
#+email: thom.cherryhomes@gmail.com

#+begin_note
Talk duration: 45 min max.
#+end_note

* state of the union

- Fujinet is a mature; multi-platform project

- Apple ][ bring-up

- macintosh 68k bring-up

- trs-80 color computer bring-up

- generic bus interface

- fujinet-lib for cross platform fujinet programming in c

- fujinet game lobby

- what you can do to help!
    
- and more

* FUJINET is a mature; multi-platform project

- more platforms
  + apple ][
  + MACINTOSH 68K
  + TRS-80 Color Computer

- FUJINET-PC brings FUJINET to emulators
  + Atari 8-bit
  + apple ][
  + others? (*)

- More contributors:
  + Mark Fisher
  + Oliver Schmidt (a2RetroNet)
      
(*) indicates where you can help!

* In the last few months

- Oliver Schmidt and Mark fisher port Contiki Browser
  [[https://content.invisioncic.com/r322239/monthly_2024_04/IMG_8927.thumb.jpg.9d5c423ab011c8d0cb1d36ccdac83b7b.jpg][Atari 8-bit Screenshot]]
  [[https://pbs.twimg.com/media/GKkqqJ6W8AAFOnD.jpg][Apple II Screenshot]]

- [[https://cdn.discordapp.com/attachments/656981817848496202/1225872080017424455/image.png?ex=6622b557&is=66104057&hm=897ed98bc95b777cdf20c488b17fecf57a99fcc7f3500104cecff83abce63f0b&][Tomek Rekawek sends PR for TCP TNFS (!)]]

- FujiNet-Lib non-blocking read improvements

- Network memory leak fixed!

- New web-based Flash installer
  https://fujinet.online/flasher/

- Desktop Flasher Program updated
  https://fujinet.online/download/

- Nightly builds
  https://github.com/FujiNetWIFI/fujinet-firmware/releases/tag/nightly

#+begin_quote
"There are decades where nothing happens; 
  and there are weeks where decades happen"
    --V.I. Lenin
#+end_quote


** Network Memory Leak Fixed

- Network Operations were leaking 1000+ bytes for each open/read/close

- Original solution was to allocate from PSRAM for anything more than 20 bytes

- Work-around couldn't be used on Apple2

- ESP-IDF's heap tracing tools were too basic.

- Solution: Use Valgrind on FujiNet-PC

- Code Solution: Convert all C malloced buffers to use C++ <uint8_t> std::vectors, which automatically allocate heap, and deallocate when they leave scope.


** Faster Cold-Start time!

- FujiNet cold start time had steadily increased, up to 800ms! too slow!

- Measuring time execution inside main() indicated where the problem was:

https://github.com/FujiNetWIFI/fujinet-firmware/blob/master/src/main.cpp

#+begin_src 

| Line      | ms   | Description
|---        |---   |---
| 152       | 3    | Immediately after start
| 165       | 18   | nvs_flash_init()
| 194       | 19   | check_hardware_ver()
| 196       | 19   | fnKeyManager.setup()
| 199       | 19   | fnLedManager.setup()
| 200       | 430  | fsFlash.start()  <-- Here.
| 202       | 507  | fnSDFAT.start()
| 208       | 508  | crypto.setkey()
| 212       | 588  | Config.load()
| 216       | 760  | theFuji.setup()

#+end_src

- SPIFFS too slow! It builds filesystem metadata at cold start!

- Solution? Use LittleFS

- @Idolpx did the work to use LittleFS as part of Meatloaf. Work had already been merged in.

- So we switched over to use it.

- Result? 800ms was reduced to 160ms (!)

- This also means long standing bug of FujiNet not fast enough to cold start on Atari 400/800? now fixed.
 
- But now it can be done over web! https://fujinet.online/flasher/

* Apple ][ bring-up

- rock solid!

- [[shell:xviewer apple3.jpg][Apple /// support]]

- New vendor! https://www.fvresearch.com/
  
- next: engage hardware vendors(*)

- Apple II 5cs now working! (launch applewin)

* Macintosh 68K bring-up

- [[shell:xviewer macfuji_dev_board.jpg][First Development boards made]]

- [[shell:xviewer macfuji_booting_a_floppy.jpg][Can use FLOPPY or DCD images]]

- [[shell:xviewer fujimac_desk_accessory.png][NEXT: CONFIG Desk Accessory]]

- Figure out Networking and Printing(*)

- New contributor Marcio Teixeira
-- [[shell:xviewer FujiHello.jpg][He has been figuring out Mac<->FujiNet protocol]]

  (*) Where you can help!

* TRS-80 Color Computer bring-up

- Works on All TRS-80 Color Computers: 1, 2, and 3.

- [[https://www.youtube.com/shorts/-w3FwIjD4SY][Plugs into Cartridge slot.]]

- [[shell:celluloid coco-disk.mp4][Disk]], [[shell:celluloid coco-print.mp4][print]], and networking

- [[shell:xviewer rev000.jpg][HDB-DOS in ROM on cartridge.]]

- [[https://www.youtube.com/shorts/XGEPfu1arQg][ISS Tracker]]

- [[shell:celluloid coco-news.mp4][News Reader]]

- [[shell:celluloid netcat.mp4][Netcat]]

- NEXT: APPS

* Atari 2600 bring-up

- Headed by:
  Jeff Piepmeier
  gtortone

- Cross team collaboration with PlusCart!

- Ported PlusCart+ firmware from STM32
  to RP2040

- [[shell:celluloid pf2.mp4][Boot cart]] over local storage,
  or network.

- Next: Communicate with ESP32
  to leverage our network stack

- So that Games like 5CS will work
  [[https://woodgrain.taswegian.com/index.php?action=dlattach;attach=335;image][(kernel work started by Al_Nafuur!)]]

* Generic Parallel Bus

** Why?

- Every FujiNet bring-up thus far has been serial.

- Many more systems have a parallel expansion bus.

- Game consoles have cartridge slots.

- Computer examples
  + TRS-80 Model 1, 2, 3, 4 (Z80)
  + ZX Spectrum (Z80)
  + Mattel Aquarius (Z80)
  + IBM 5150 PC (ISA)
  + S-100 (Altair, IMSAI, etc.)
  + MSX
  + ...and more.

- Game Console examples
  + Atari 2600
  + Mattel Intellivision
  + ColecoVision
  + Nintendo Entertainment System
  + Sega SG-1000/Master System
  + ...and more.

** How?

- Use RP2040 as front-end to ESP32

- Use RP2040 DMA features to help with address decoding.

- Maximize usage of both cores
  + core 0 - High level work, interface to ESP32
  + core 1 - Timing Critical work

- Overclock

- Example work being done here: https://github.com/FujiNetWIFI/fujinet-firmware/tree/master/pico

** When?

- Jeff Piepmeier is doing first implementation, CoCo Cart
  + Replaces Serial connection with bus implementation.
  + Using Becker Port implementation

- Jeff Piepmeier also used pico on Mac implementation for faster serial performance needed for DCD.

- Owen Reynolds is experimenting with approaches for ZX Spectrum

- gtortone is working on Atari 2600 implementation.

- These two implementations will show us how to reach
  anything with a card edge!

* Future Bring-ups

- Acorn BBC/Electron

- [[shell:xviewer 5cs-intv.png][Intellivision]]

- MSX

- Is your favorite machine here? Help us out!

- Is your favorite machine not here? Help us out!

* fujinet-lib

- A cross-platform library to access FujiNet functions from C.

- Headed by Mark Fisher (@fenrock)

- Atari, Apple2, CoCo, C64

** fn_fuji

- FujiNet Control Functions, such as those used by CONFIG.
  + fuji_set_ssid()
  + fuji_mount_all()
  + fuji_get_wifi_status()
  + etc.

- Write a replacement for CONFIG, or use a subset of its functionality.

#+begin_src C

#include <fujinet-fuji.h>

// Set SSID

void main(void)
{
    NetConfig nc = {"my_network","network_password"};

    if (!fuji_set_ssid(&nc))
    {
        printf("Could not set WiFi Network.");
        return;
    }
}

#+end_src

** fn_network

- Easy use of FujiNet networking functions

- Open, Close, Read, Write, Status, special functions

#+begin_src C

#include <fujinet-network.h>
#include <stdio.h>

// Print my external IP from icanhazip.com

const char *url = "n:https://icanhazip.com/";
uint8_t buffer[256];
uint16_t bw;
uint8_t c, err;

void main(void)
{
    if (network_open(url, OPEN_MODE_READ, OPEN_TRANS_NONE) != FN_ERR_OK)
    {
        printf("Could not open. Aborting.\n");
        return;
    }

    // Get # of bytes waiting
    network_status(url, &bw, &c, &err);

    // Read connection
    network_read(url, buffer, bw);

    // Close connection
    network_close(url);

    printf("My IP is: %s\n\n",buffer);
}

#+end_src

* FUJINET Game lobby

- Potential for cross-platform game-play. (launch emus)
  
- [[shell:vlc lobby.mp4][Atari Lobby and 5 Card Stud is STABLE]]

- Apple2 5 Card Stud works great!

- LOBBY is written in 'C' and is CROSS PLATFORM
  https://github.com/FujiNetWIFI/fujinet-apps/tree/master/lobby

- 5CS is also written in 'C'
  https://github.com/FujiNetWIFI/fujinet-apps/tree/master/5cardstud

- NEXT: Commodore, Adam, and COCO(*)

  (*) Where you can help!

* Atari User's Guide

- Written in DocBook 5.1

- [[shell:open /home/thomc/Desktop/fujinet-manuals/fujinet_for_atari_users/fujinet_for_atari_users.pdf][Professional Typesetting]]

- Covers three parts

+ User's Guide
+ Programmer's Guide
+ Reference

- Up in the fujinet-manuals repo on GitHub

* Atari Intro Guide

- Done by Andy Diller

- [[shell:open /home/thomc/Desktop/fujinet-sotu-2024-talk/FujiNet_Atari_Manual_draft5.pdf][Focusing on Getting Started]]

- Modeled after Atari DOS manual

* LOTS MORE

- High Score Enabled Games
  + All it needs is disk writing
  + Implemented on Atari, Adam, and Apple ][
  + Scrapers are simple
  + Web Scoreboard: http://scores.irata.online/
  + Code at:
    https://github.com/FujiNetWIFI/fujinet-high-scores

- Network Operating System (Atari)
  + Only needs N:, no disk filesystem.
  + Can use any N: protocol (SMB, TNFS, HTTP, FTP, etc.)
  + On-line help!
  + [[https://www.youtube.com/watch?v=52PopzZsKUM][Video]]
  + GitHub: https://github.com/FujiNetWIFI/fujinet-nhandler/
  
(*) Where you can help!

* What can you do?

- Come to the discord!
  https://discord.gg/2Ce9guX

- GET A FUJINET, OR...
  Install FUJINET-PC and hack on code

- Build FUJINET for your communities.

- Let people know about FUJINET

* When is FujiNet coming to ______?

- When We Get Hardware (donations welcome), or

- When You Champion and Help do a Bring-up!

* Questions?

- GitHubs:
  Hardware: https://github.com/FujiNetWIFI/fujinet-hardware
  Firmware: https://github.com/FujiNetWIFI/fujinet-platformio
  SOFTWARE: https://github.com/FujiNetWIFI/fujinet-apps
  Libraries: https://github.com/FujiNetWIFI/fujinet-network-lib
  High Scores: https://github.com/FujiNetWIFI/fujinet-high-scores
  
